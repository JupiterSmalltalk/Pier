rendering
renderWysiwygEditorOn: html
	| baseUrl |

	"extra div is necessary to avoid Pier's 'enhanced' editor script adding it's toolbar (when there are no tabs)"
	html div with: [
		html textArea
			id: self textId;
			callback: [ :value | self wikiText: value ];
			with: [ html heading level1; with: 'loading...' ] ].
		
	"note we could set the html directly in the text area above (instead of 'loading...') - however subsequently we use 
	pierWysiwygEditor.setEditorHTML('xxxxxx') generated by #setEditorHtmlContentJS and the editor interprets
	 the html subtly differently depending on it's origin - this was a particular problem with the rendering of the 
	verbatim output. 
	So instead we choose to set the editor's html using the same method initially as used on subsequent calls.
	
	We can't call pierWysiwygEditor.setEditorHTML('html here') directly - first, we have to wait for the editor to 
	load - so we hook into the 'editorContentLoaded' event "
	
	"global reference to the editor"
	html script: 'var pierWysiwygEditor=null;'.
	
	html script: (
		(
			(JSStream on: self editorJs),
			(JSStream on:  'pierWysiwygEditor.on("editorContentLoaded", function () {') , 
			(self renderSetEditorHtmlContentJS) , 
			(JSStream on: 'this.removeListener("editorContentLoaded", arguments.callee)}, null, null);')) 
		asFunction assignLocalTo: 'initialiseWysiwygEditor').

	"when the editor is loaded dynamically by pieradmin the scripts are loaded in an indeterminant order; here we retry
	until the YAHOO editor scripts are loaded. Retry 20 times then give up."
	html script: '$(
			(function (retryCount) {
				if (window.YAHOO) {
					initialiseWysiwygEditor();
				} else {
					if (retryCount > 0) {
						var callee = arguments.callee;
						window.setTimeout(function(){callee(retryCount - 1)}, 100);
					}
				}
			})(20))'.
			
	"ensure that we convert the html in the editor into wiki text and copy back into the text 
	area before the form is submitted.
	if both editors are rendered, we ensure that we receives updates from the visible view"
	baseUrl := html application url.
	self configuration allowWikiTextEditing 
		ifTrue: [
			"bind using 'mousedown' rather than 'click' so that we can ensure that we parse the html before any 
			other 'click' events are executed"
			html script: ('
			$(function(){
			$("input[type=submit], button[type=submit]").bind("mousedown", function(){
			if ($("#', self tabId, '").tabs("option", "selected") == 1) {
				$("#wikiEditor").val(parseHtmlToPierWikiSyntax(pierWysiwygEditor._getDoc().body, "', baseUrl greaseString, '"))}
			$("#', textId, '").val($("#wikiEditor").val())})})') ]
		ifFalse: [ 
			html script: '$(function(){$("input[type=submit], button[type=submit]").bind("mousedown", function(){$("#', textId, '").val(parseHtmlToPierWikiSyntax(pierWysiwygEditor._getDoc().body, "', baseUrl greaseString, '"))})})'].